<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-08-04T12:58:19+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Weekly Mountain, Paper, and Work</title><subtitle>Bay is a minimal Jekyll Theme.</subtitle><entry><title type="html">AI CONCEPTS NOTE</title><link href="http://localhost:4000/_nlp/study/2021/08/04/AI-CONCEPTS-NOTE.html" rel="alternate" type="text/html" title="AI CONCEPTS NOTE" /><published>2021-08-04T11:52:10+09:00</published><updated>2021-08-04T11:52:10+09:00</updated><id>http://localhost:4000/_nlp/study/2021/08/04/AI-CONCEPTS-NOTE</id><content type="html" xml:base="http://localhost:4000/_nlp/study/2021/08/04/AI-CONCEPTS-NOTE.html">&lt;p&gt;한번 정리하고 넘어가고 싶어서 개념들 서술해봅니다.&lt;/p&gt;

&lt;p&gt;-2-&lt;/p&gt;

&lt;p&gt;랭기지모델 학습 - 단어 분포 모사. 마코브 어썸션 도입하여 더 낮은 엔그램으로 근사&lt;/p&gt;

&lt;p&gt;좋은 모델 : 언어분포 잘 모사. 잘 정의된 테스트셋에 높은 확률 반환&lt;/p&gt;

&lt;p&gt;펄플렉시티: 몇개중에 헷갈리고 있냐. 작을 수록 좋은 것&lt;/p&gt;

&lt;p&gt;뉴럴랭기지 모델은 제너럴라이즈가 잘 된다는 것이 장점, 등장하지 않은 단어들도 처리 가능&lt;/p&gt;

&lt;p&gt;엔트로피 불확실성 나타냄. 자주 일어나는 사건은 낮은 정보량. 드물게 발생하면 높은 정보량 가짐.
불확실성은 1/등장확률 에 비례하고, 정보량에 반비례
확률 낮은 것일 수록 정보량 많은 것, 불확실성 큰 것
정보량은 마이너스 로그 확률. 확률 높아질수록 정보량 낮아짐. 0가까워질수록 높아짐&lt;/p&gt;

&lt;p&gt;엔트로피 높을수록 플랫 디스트리뷰션, 낮을수록 샤프한 디스트리뷰션&lt;/p&gt;

&lt;p&gt;크로스엔트로피는 퍼플렉시티의 로그취한 값.
퍼플렉시티 작게하는 것이 목적으로 이는 크로스엔트로피 익스퍼넨셜 미니마이즈.
즉, 크로스엔트로피 미니마이즈로 볼 수 있음&lt;/p&gt;

&lt;p&gt;클래시피케이션이니까 크로스엔트로피 쓴다고 봐도 되고
두 분포 차이 미니마이즈니까 크로스엔트로피 미니마이즈.
아키르릴후드 맥시마이즈 할꺼니까 네거티브 라이클리후드 마니마이즈 하는 건데 이게 크로스엔트로피 미니마이즈와 같음.&lt;/p&gt;

&lt;p&gt;크로스엔트로피 로그 취하면 퍼플렉시티.
퍼플렉시티 익스퍼넨셜 취하면 크로스엔트로피임.&lt;/p&gt;

&lt;p&gt;seq2seq의 many to many는 many to one 과 one to many 로 이해하는 것이 좋음&lt;/p&gt;

&lt;p&gt;non-auto-regessive-현재 상태가 앞 뒤 문맥에 의해 정해짐
auto-regressive- 과거상태 의존&lt;/p&gt;

&lt;p&gt;티처포싱 안 하면 many2many 개수 안 맞을 수도. eos먼저 뜨면
티처포싱 안 하면 이전 출력에 따라 현재 스테이트 달라짐 mle 이상해짐
mle다르게 수식 적용
그래서 실제 정답을 넣으줌. 그래서 학습이랑 테스트(추론) 다로 2개 짜야함
티처포싱 성능 저하될 수 있으나 기본적 성능 좋아서 걍 쓰면 되지만.. 왜 저하되냐면 순서까지도 기억해주는 오버피팅이 되기때문. 그래서 보통 반반티처포싱 등 사용&lt;/p&gt;

&lt;p&gt;fluent한 문장 골라내는 일이나 다음단어 뽑아내는 일은 언어모델로 사실 같음.&lt;/p&gt;</content><author><name></name></author><category term="_NLP" /><category term="study" /><summary type="html">한번 정리하고 넘어가고 싶어서 개념들 서술해봅니다.</summary></entry><entry><title type="html">SPRING:SINGLETON</title><link href="http://localhost:4000/study/2021/07/27/SPRING-SINGLETON.html" rel="alternate" type="text/html" title="SPRING:SINGLETON" /><published>2021-07-27T10:52:10+09:00</published><updated>2021-07-27T10:52:10+09:00</updated><id>http://localhost:4000/study/2021/07/27/SPRING:SINGLETON</id><content type="html" xml:base="http://localhost:4000/study/2021/07/27/SPRING-SINGLETON.html">&lt;p&gt;싱글톤이 무엇일까요.&lt;/p&gt;

&lt;p&gt;여러 클라이언트가 서비스를 요청할 때마다 클래스 인스턴스를 만들게 되면 자원이 낭비됩니다.&lt;/p&gt;

&lt;p&gt;싱글톤이란 클라이언트가 서비스를 요청할 때 하나의 클래스 인스턴스만 만들어 서비스되게끔 하는 것입니다.&lt;/p&gt;</content><author><name></name></author><category term="study" /><summary type="html">싱글톤이 무엇일까요.</summary></entry><entry><title type="html">CROSS ENTROPY</title><link href="http://localhost:4000/_nlp/study/2021/07/21/CROSS-ENTROPY.html" rel="alternate" type="text/html" title="CROSS ENTROPY" /><published>2021-07-21T17:25:10+09:00</published><updated>2021-07-21T17:25:10+09:00</updated><id>http://localhost:4000/_nlp/study/2021/07/21/CROSS-ENTROPY</id><content type="html" xml:base="http://localhost:4000/_nlp/study/2021/07/21/CROSS-ENTROPY.html">&lt;p&gt;CROSS ENTROPY&lt;/p&gt;

&lt;p&gt;현재는 백엔드 개발이 메인 업무이지만 전공도 복기해두어야 한다는 생각에 nlp관련 글도 포스팅해보려고 합니다.
그래서 이렇게 뜬금없게 cross entropy에 대한 포스트를 올리게 되었습니다.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="_NLP" /><category term="study" /><summary type="html">CROSS ENTROPY</summary></entry><entry><title type="html">SPRING?</title><link href="http://localhost:4000/study/2021/07/19/SPRING.html" rel="alternate" type="text/html" title="SPRING?" /><published>2021-07-19T19:40:10+09:00</published><updated>2021-07-19T19:40:10+09:00</updated><id>http://localhost:4000/study/2021/07/19/SPRING</id><content type="html" xml:base="http://localhost:4000/study/2021/07/19/SPRING.html">&lt;p&gt;SPRING?&lt;/p&gt;

&lt;p&gt;스프링이 뭔지 한 번 짚고 넘어가야할 것 같아 포스트를 작성하게 되었습니다.&lt;/p&gt;

&lt;p&gt;스프링이란 크게는 스프링부트, 스프링프레임워크 등을 포함하는 스프링 생태계로 볼 수 있고
작게는 빈을 관리하는 스프링 컨테이너(DI or IOC 컨테이너) 기술이라고 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;스프링의 핵심은 자바나 코트린 기반의 프레임 워크로 객체지향적 개발을 가능하게 도와주는 것입니다.&lt;/p&gt;

&lt;p&gt;기존의 쿼리 기반의 개발은 테이블에 종속되기 때문에 객체지향과는 거리가 멀어져 버리고, 자연히 개발 속도가 저하되는 등의 단점이 있죠.&lt;/p&gt;

&lt;p&gt;그런데 스프링을 사용하여 개발하면 이러한 단점들을 보완해줄 수 있는 것입니다.&lt;/p&gt;

&lt;p&gt;이것만으로 포스팅을 마치기에는 설명이 적은 것 같아 객체지형적 개발에 대해서도 조금 서술해 보겠습니다.&lt;/p&gt;

&lt;p&gt;객체지향의 특징은 추상화, 캡슐화, 상속, 다형성이 있는데 결국 재사용성을 위함이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;만들어놓은 컴포넌트를 비슷한 상황에서 재사용하고 또 확장하여 재사용하는 것이 목적이 되는 것이죠.&lt;/p&gt;

&lt;p&gt;다형성도 여기에 포함되는데 역할과 구현을 인터페이스와 클래스(와 구현객쳬)로 분리해 놓는 것입니다.&lt;/p&gt;

&lt;p&gt;설명하는 김에 좋은 객체 지향 설계의 5원칙인 SOLID에 대해서도 간략히 서술해 보며 이번 포스팅을 마치겠습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SRP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Single&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Responsibility&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Principle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;단일&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;책임&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;원칙으로&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;한&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;클래스는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;하나의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;책임&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;역할&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가져야&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OCP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Closed&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Principle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;기능&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;확장에는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;열려&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;있으나&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;이&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;때&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구현&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;등의&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;변경에는&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;닫혀&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;있어야&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LSP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Liskov&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Substitution&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Principle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;구현은&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;인터페이스를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;따라야&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ISP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Interface&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Segregation&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Principle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;인터페이스도&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;적당하게&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;잘&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;쪼개져있어야&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DIP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Inversion&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Principle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;인터페이스에&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;의존해야&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="study" /><summary type="html">SPRING?</summary></entry><entry><title type="html">JPA Fetch Join</title><link href="http://localhost:4000/study/2021/07/16/JPA-Fetch-Join.html" rel="alternate" type="text/html" title="JPA Fetch Join" /><published>2021-07-16T09:45:10+09:00</published><updated>2021-07-16T09:45:10+09:00</updated><id>http://localhost:4000/study/2021/07/16/JPA-Fetch-Join</id><content type="html" xml:base="http://localhost:4000/study/2021/07/16/JPA-Fetch-Join.html">&lt;p&gt;Fetch Loading&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="study" /><summary type="html">Fetch Loading</summary></entry><entry><title type="html">JPA Lazy Loading</title><link href="http://localhost:4000/study/2021/07/13/JPA-Lazy-Loading.html" rel="alternate" type="text/html" title="JPA Lazy Loading" /><published>2021-07-13T16:45:10+09:00</published><updated>2021-07-13T16:45:10+09:00</updated><id>http://localhost:4000/study/2021/07/13/JPA-Lazy-Loading</id><content type="html" xml:base="http://localhost:4000/study/2021/07/13/JPA-Lazy-Loading.html">&lt;p&gt;LAZY Loading, 지연로딩에 대해서는 꼭 한번 서술해보고 싶었습니다.&lt;/p&gt;

&lt;p&gt;지연로딩을 설명하려면 프록시를 알아야하는데,
프록시는 최초 호출시 실제 클래스 상속받아 생성하는 것입니다.&lt;/p&gt;

&lt;p&gt;지연로딩은 예를 들어 student의 reference인 school을 로딩한다고 할 때
student를 먼저 로딩하고 프록시의 school을 로딩하는 것입니다.&lt;/p&gt;</content><author><name></name></author><category term="study" /><summary type="html">LAZY Loading, 지연로딩에 대해서는 꼭 한번 서술해보고 싶었습니다.</summary></entry><entry><title type="html">JPA how to make DTO</title><link href="http://localhost:4000/study/2021/07/09/JPA-how-to-make-DTO.html" rel="alternate" type="text/html" title="JPA how to make DTO" /><published>2021-07-09T17:45:10+09:00</published><updated>2021-07-09T17:45:10+09:00</updated><id>http://localhost:4000/study/2021/07/09/JPA-how-to-make-DTO</id><content type="html" xml:base="http://localhost:4000/study/2021/07/09/JPA-how-to-make-DTO.html">&lt;p&gt;아무래도 최근에 하는 일이 백엔드이다 보니 스프링 JPA관련 내용으로 시작을 하게 되었습니다.&lt;/p&gt;

&lt;p&gt;특히 api에서는 엔티티를 직접 다루는 것을 주의해야하니 DTO로 래핑하는 것에 대해 작성해보겠습니다.&lt;/p&gt;

&lt;p&gt;사실 별건 아니고 아래처럼 별거 아니고 그냥 class 하나 더 정의해서 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;엔티티 대신 api에서 사용할 클래스를 작성하는 것입니다:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DTO&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentId&lt;/span&gt;
 &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;엔티티를 노출시키는 것은 보안에 있어서 바람직하지 않고 확장성 측면에서도 api 스펙이 완전히 바뀌어서 좋지 않으니 대신 dto를 사용하는 것이지요.&lt;/p&gt;</content><author><name></name></author><category term="study" /><summary type="html">아무래도 최근에 하는 일이 백엔드이다 보니 스프링 JPA관련 내용으로 시작을 하게 되었습니다.</summary></entry><entry><title type="html">Halasan mountain</title><link href="http://localhost:4000/mountain/2021/07/09/Halasan-mountain.html" rel="alternate" type="text/html" title="Halasan mountain" /><published>2021-07-09T17:35:10+09:00</published><updated>2021-07-09T17:35:10+09:00</updated><id>http://localhost:4000/mountain/2021/07/09/Halasan-mountain</id><content type="html" xml:base="http://localhost:4000/mountain/2021/07/09/Halasan-mountain.html">&lt;p&gt;벼르고 벼르던 한라산 돈내코 코스에 다녀왔습니다.
시작 위치가 특별하여 신비로운 분위기를 느끼며 등반을 시작할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;충훈탑-&amp;gt;밀림입구-&amp;gt;썩은물통-&amp;gt;적송지대-&amp;gt;살채기도-&amp;gt;바위-&amp;gt;평궤대피소-&amp;gt;갈림길-&amp;gt;남벽분기점&lt;/p&gt;

&lt;p&gt;코스는 다소 비좁은 감이 있었습니다.
발을 잘못 디디면 물에 빠지기도 하고 난이도가 조금 있었습니다.
이로써 주요 코스는 다 돌아보게되어 기쁩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="mountain" /><summary type="html">벼르고 벼르던 한라산 돈내코 코스에 다녀왔습니다. 시작 위치가 특별하여 신비로운 분위기를 느끼며 등반을 시작할 수 있었습니다.</summary></entry><entry><title type="html">Why we use SPRING / JPA</title><link href="http://localhost:4000/study/2021/07/06/weekly-study-page.html" rel="alternate" type="text/html" title="Why we use SPRING / JPA" /><published>2021-07-06T16:07:10+09:00</published><updated>2021-07-06T16:07:10+09:00</updated><id>http://localhost:4000/study/2021/07/06/weekly-study-page</id><content type="html" xml:base="http://localhost:4000/study/2021/07/06/weekly-study-page.html">&lt;p&gt;Backend 개발을 하면서 사내 사정으로 다소 늦게? 스프링부트 JPA를 사용하게 되었다.&lt;/p&gt;

&lt;p&gt;스프링부트 JPA를 사용하는 것은 사실 개발하는 회사들에서는 너무나 당연한 것이지만, 당위성을 설명하기 위해서는 정리가 좀 필요했다.&lt;/p&gt;

&lt;p&gt;그래서 미약하게나마 정리를 조금 해보았다.&lt;/p&gt;

&lt;p&gt;우선, SQL 중심적인 개발의 문제점을 조금 살펴보면
-CRUD 무한 반복, 지루한 코드(sql)&lt;/p&gt;

&lt;p&gt;-필드 추가 시 한땀 한땀 다 추가해야함(query에)&lt;/p&gt;

&lt;p&gt;-객체와 관계형 데이터베이스의 차이에서 오는 문제점들(상속, 연관관계 등)-&amp;gt;반복 늘어나고 번잡해짐(join하고 join하고 ….)&lt;/p&gt;

&lt;p&gt;-자바 컬렉션에서 조회하면? 걍 .get 하면 됨. 부모타입으로 조회 후 다형성 활용 가능(sql 중심은 이게 안 됨)&lt;/p&gt;

&lt;p&gt;-객체 연관관계는 한방향, 테이블 연관관계는 양방향.(포린 키로) &amp;lt;-객체지향스럽지 못 함.&lt;/p&gt;

&lt;p&gt;-db에 넣는 순간 테이블 폼에 맞게 다 바꿔줘야 함.&lt;/p&gt;

&lt;p&gt;-상황에 따라 동일한 회원 조회 여러벌 생성(Member만,  member와 team까지 등)&lt;/p&gt;

&lt;p&gt;SPRING /JPA (ORM)의 경우
-객체 관계 매핑. 객체는 객체대로, 관계형 db는 db대로. ORM프레임워크가 중간에서 매핑&lt;/p&gt;

&lt;p&gt;-대중적 언어 모두 ORM기술 존재하며 사용되고 있음&lt;/p&gt;

&lt;p&gt;정리를 하다보니 ORM 사용의 당위성을 설명하는 것이 된 것 같지만..&lt;/p&gt;

&lt;p&gt;간략하게 이러한 이유들이 있음을 한번 포스팅 해보고 싶었다.&lt;/p&gt;

&lt;p&gt;시간 날 때마다 업데이트할 예정&lt;/p&gt;</content><author><name></name></author><category term="study" /><summary type="html">Backend 개발을 하면서 사내 사정으로 다소 늦게? 스프링부트 JPA를 사용하게 되었다.</summary></entry><entry><title type="html">Weeky Mountain page!</title><link href="http://localhost:4000/mountain/2021/06/21/weekly-mountain-page.html" rel="alternate" type="text/html" title="Weeky Mountain page!" /><published>2021-06-21T16:07:10+09:00</published><updated>2021-06-21T16:07:10+09:00</updated><id>http://localhost:4000/mountain/2021/06/21/weekly-mountain-page</id><content type="html" xml:base="http://localhost:4000/mountain/2021/06/21/weekly-mountain-page.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="mountain" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>